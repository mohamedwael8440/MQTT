
MQTTApp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  0000014c  000001c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000898  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  0000092f  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  0000095e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000257  00000000  00000000  000009be  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000018f  00000000  00000000  00000c15  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000170  00000000  00000000  00000da4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  00000f14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000010d  00000000  00000000  00000fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000146  00000000  00000000  000010b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000011fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e4       	ldi	r30, 0x4C	; 76
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 a4 00 	jmp	0x148	; 0x148 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:

#include "uart.h"

int main(void)
{
	Uart_Init(9600);
  82:	60 e8       	ldi	r22, 0x80	; 128
  84:	75 e2       	ldi	r23, 0x25	; 37
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	0e 94 4c 00 	call	0x98	; 0x98 <Uart_Init>
	Uart_SendString("Started...\n");
  8e:	80 e6       	ldi	r24, 0x60	; 96
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	0e 94 73 00 	call	0xe6	; 0xe6 <Uart_SendString>
  96:	ff cf       	rjmp	.-2      	; 0x96 <main+0x14>

00000098 <Uart_Init>:
#include "uart.h"

/* Init. uart */
void Uart_Init(unsigned long baudRate){
	unsigned short baud = 0;
	baud = ((F_CPU)/(16*baudRate)) - 1;
  98:	dc 01       	movw	r26, r24
  9a:	cb 01       	movw	r24, r22
  9c:	88 0f       	add	r24, r24
  9e:	99 1f       	adc	r25, r25
  a0:	aa 1f       	adc	r26, r26
  a2:	bb 1f       	adc	r27, r27
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	aa 1f       	adc	r26, r26
  aa:	bb 1f       	adc	r27, r27
  ac:	9c 01       	movw	r18, r24
  ae:	ad 01       	movw	r20, r26
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	44 1f       	adc	r20, r20
  b6:	55 1f       	adc	r21, r21
  b8:	22 0f       	add	r18, r18
  ba:	33 1f       	adc	r19, r19
  bc:	44 1f       	adc	r20, r20
  be:	55 1f       	adc	r21, r21
  c0:	60 e0       	ldi	r22, 0x00	; 0
  c2:	72 e1       	ldi	r23, 0x12	; 18
  c4:	8a e7       	ldi	r24, 0x7A	; 122
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 82 00 	call	0x104	; 0x104 <__udivmodsi4>
  cc:	21 50       	subi	r18, 0x01	; 1
  ce:	31 09       	sbc	r19, r1
	/* Set baud rate */
//	baud = 51;
	UBRRH = (unsigned char)(baud>>8);
  d0:	30 bd       	out	0x20, r19	; 32
	UBRRL = (unsigned char)baud;
  d2:	29 b9       	out	0x09, r18	; 9
	/* Enable receiver and transmitter */
	UCSRB = (1<<RXEN)|(1<<TXEN);
  d4:	88 e1       	ldi	r24, 0x18	; 24
  d6:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 1stop bit */
	UCSRC = (1<<URSEL)|(3<<UCSZ0);
  d8:	86 e8       	ldi	r24, 0x86	; 134
  da:	80 bd       	out	0x20, r24	; 32
  dc:	08 95       	ret

000000de <Uart_SendByte>:
}
/* Send one Byte */
void Uart_SendByte(unsigned char data){
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) );
  de:	5d 9b       	sbis	0x0b, 5	; 11
  e0:	fe cf       	rjmp	.-4      	; 0xde <Uart_SendByte>
	/* Put data into buffer, sends the data */
	UDR = data;
  e2:	8c b9       	out	0x0c, r24	; 12
  e4:	08 95       	ret

000000e6 <Uart_SendString>:
}
/* Send String (number of bytes) */
void Uart_SendString(unsigned char* str){
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
  ea:	ec 01       	movw	r28, r24
	unsigned long ind = 0;
	while(str[ind] != 0){
  ec:	88 81       	ld	r24, Y
  ee:	88 23       	and	r24, r24
  f0:	31 f0       	breq	.+12     	; 0xfe <Uart_SendString+0x18>
	while ( !( UCSRA & (1<<UDRE)) );
	/* Put data into buffer, sends the data */
	UDR = data;
}
/* Send String (number of bytes) */
void Uart_SendString(unsigned char* str){
  f2:	21 96       	adiw	r28, 0x01	; 1
	unsigned long ind = 0;
	while(str[ind] != 0){
		Uart_SendByte(str[ind]);
  f4:	0e 94 6f 00 	call	0xde	; 0xde <Uart_SendByte>
	UDR = data;
}
/* Send String (number of bytes) */
void Uart_SendString(unsigned char* str){
	unsigned long ind = 0;
	while(str[ind] != 0){
  f8:	89 91       	ld	r24, Y+
  fa:	81 11       	cpse	r24, r1
  fc:	fb cf       	rjmp	.-10     	; 0xf4 <Uart_SendString+0xe>
		Uart_SendByte(str[ind]);
		ind++;
	}
}
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <__udivmodsi4>:
 104:	a1 e2       	ldi	r26, 0x21	; 33
 106:	1a 2e       	mov	r1, r26
 108:	aa 1b       	sub	r26, r26
 10a:	bb 1b       	sub	r27, r27
 10c:	fd 01       	movw	r30, r26
 10e:	0d c0       	rjmp	.+26     	; 0x12a <__udivmodsi4_ep>

00000110 <__udivmodsi4_loop>:
 110:	aa 1f       	adc	r26, r26
 112:	bb 1f       	adc	r27, r27
 114:	ee 1f       	adc	r30, r30
 116:	ff 1f       	adc	r31, r31
 118:	a2 17       	cp	r26, r18
 11a:	b3 07       	cpc	r27, r19
 11c:	e4 07       	cpc	r30, r20
 11e:	f5 07       	cpc	r31, r21
 120:	20 f0       	brcs	.+8      	; 0x12a <__udivmodsi4_ep>
 122:	a2 1b       	sub	r26, r18
 124:	b3 0b       	sbc	r27, r19
 126:	e4 0b       	sbc	r30, r20
 128:	f5 0b       	sbc	r31, r21

0000012a <__udivmodsi4_ep>:
 12a:	66 1f       	adc	r22, r22
 12c:	77 1f       	adc	r23, r23
 12e:	88 1f       	adc	r24, r24
 130:	99 1f       	adc	r25, r25
 132:	1a 94       	dec	r1
 134:	69 f7       	brne	.-38     	; 0x110 <__udivmodsi4_loop>
 136:	60 95       	com	r22
 138:	70 95       	com	r23
 13a:	80 95       	com	r24
 13c:	90 95       	com	r25
 13e:	9b 01       	movw	r18, r22
 140:	ac 01       	movw	r20, r24
 142:	bd 01       	movw	r22, r26
 144:	cf 01       	movw	r24, r30
 146:	08 95       	ret

00000148 <_exit>:
 148:	f8 94       	cli

0000014a <__stop_program>:
 14a:	ff cf       	rjmp	.-2      	; 0x14a <__stop_program>
